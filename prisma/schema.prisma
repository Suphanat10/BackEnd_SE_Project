generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model course {
  course_id          Int             @id @default(autoincrement())
  course_name        String?         @db.VarChar(255)
  course_description String?         @db.Text
  course_visibility  Boolean?
  instructor         Int?
  image              String?         @db.VarChar(255)
  cost               Float?
  img_account        String?         @db.VarChar(255)
  users_account      users_account?  @relation(fields: [instructor], references: [user_id], onDelete: Restrict, onUpdate: Restrict, map: "course_ibfk_1")
  course_exam        course_exam[]
  course_lesson      course_lesson[]
  course_reg         course_reg[]

  @@index([instructor], map: "instructor_fk")
}

model course_exam {
  exam_id             Int                   @id @default(autoincrement())
  exam_name           String?               @db.VarChar(255)
  course_id           Int?
  course              course?               @relation(fields: [course_id], references: [course_id], onDelete: Restrict, onUpdate: Restrict, map: "course_exam_ibfk_1")
  course_exam_problem course_exam_problem[]

  @@index([course_id], map: "course_id")
}

model course_exam_choices {
  choices_id          Int                  @id @default(autoincrement())
  problem_id          Int?
  label               String?              @db.Text
  course_exam_problem course_exam_problem? @relation(fields: [problem_id], references: [problem_id], onDelete: Restrict, onUpdate: Restrict, map: "course_exam_choices_ibfk_1")
  reg_exam_ans        reg_exam_ans[]

  @@index([problem_id], map: "problem_id")
}

model course_exam_problem {
  problem_id          Int                   @id @default(autoincrement())
  exam_id             Int?
  problem_name        String?               @db.VarChar(255)
  correct_choice      Int?
  course_exam_choices course_exam_choices[]
  course_exam         course_exam?          @relation(fields: [exam_id], references: [exam_id], onDelete: Restrict, onUpdate: Restrict, map: "course_exam_problem_ibfk_1")
  reg_exam_ans        reg_exam_ans[]

  @@index([exam_id], map: "exam_id")
}

model course_lesson {
  lesson_id                Int              @id @default(autoincrement())
  lesson_name              String?          @db.VarChar(255)
  course_id                Int?
  completion_status_lesson Int?
  course                   course?          @relation(fields: [course_id], references: [course_id], onDelete: Restrict, onUpdate: Restrict, map: "course_lesson_ibfk_1")
  lesson_chapter           lesson_chapter[]

  @@index([course_id], map: "course_id")
}

model course_reg {
  registration_id     Int            @id @default(autoincrement())
  course_id           Int?
  user_id             Int?
  registration_status Int?
  transfer_document   String?        @db.VarChar(255)
  completion_status   Int?
  course              course?        @relation(fields: [course_id], references: [course_id], onDelete: Restrict, onUpdate: Restrict, map: "course_reg_ibfk_1")
  users_account       users_account? @relation(fields: [user_id], references: [user_id], onDelete: Restrict, onUpdate: Restrict, map: "course_reg_ibfk_2")
  reg_exam_ans        reg_exam_ans[]

  @@index([course_id], map: "course_id")
  @@index([user_id], map: "user_id")
}

model lesson_chapter {
  lesson_chapter_id Int            @id @default(autoincrement())
  content_data      String?        @db.Text
  content_type      Int?
  lesson_id         Int?
  course_lesson     course_lesson? @relation(fields: [lesson_id], references: [lesson_id], onDelete: Restrict, onUpdate: Restrict, map: "lesson_chapter_ibfk_1")

  @@index([lesson_id], map: "lesson_id")
}

model logs {
  log_id          Int       @id @default(autoincrement())
  user_id         Int?
  log_description String?   @db.Text
  timestamp       DateTime? @default(now()) @db.Timestamp(0)
  ip_address      String?   @db.VarChar(45)
}

model reg_exam_ans {
  course_reg_exam_ans_id Int                  @id @default(autoincrement())
  registration_id        Int?
  problem_id             Int?
  select_choice          Int?
  course_reg             course_reg?          @relation(fields: [registration_id], references: [registration_id], onDelete: Restrict, onUpdate: Restrict, map: "reg_exam_ans_ibfk_1")
  course_exam_problem    course_exam_problem? @relation(fields: [problem_id], references: [problem_id], onDelete: Restrict, onUpdate: Restrict, map: "reg_exam_ans_ibfk_2")
  course_exam_choices    course_exam_choices? @relation(fields: [select_choice], references: [choices_id], onDelete: Restrict, onUpdate: Restrict, map: "reg_exam_ans_ibfk_3")

  @@index([problem_id], map: "problem_id")
  @@index([registration_id], map: "registration_id")
  @@index([select_choice], map: "select_choice")
}

model users_account {
  user_id       Int          @id @default(autoincrement())
  prefix        String?      @db.VarChar(10)
  first_name    String?      @db.VarChar(50)
  last_name     String?      @db.VarChar(50)
  username      String?      @unique(map: "username") @db.VarChar(50)
  email         String?      @unique(map: "email") @db.VarChar(100)
  password      String?      @db.VarChar(255)
  permission_id Int?
  gender        String?      @db.VarChar(10)
  image         String?      @db.VarChar(255)
  google_id     String?      @db.VarChar(255)
  course        course[]
  course_reg    course_reg[]
}
